{
  "metadata": {
    "sertop_args": [],
    "cache_version": "1"
  },
  "chunks": [
    "Require Coq.Strings.String Coq.Lists.List Coq.Arith.Arith.\nImport String Arith List.ListNotations.\nOpen Scope list_scope.",
    "Require Import Coq.Bool.Bool.\n\nInductive UntypedAST : Type :=\n| UNat (n: nat)\n| UBool (b: bool)\n| UAdd (e1 e2: UntypedAST)\n| UAnd (e1 e2: UntypedAST).\n\nInductive Tau :=\n| Nat\n| Bool.\n\nFixpoint Value' (tau: Tau) :=\n  match tau with\n  | Nat => nat\n  | Bool => bool\n  end.\n\nInductive TypedAST' : Tau -> Type :=\n| TNat (n: nat) : TypedAST' Nat\n| TBool (b: bool) : TypedAST' Bool\n| TAdd (e1 e2: TypedAST' Nat): TypedAST' Nat\n| TAnd (e1 e2: TypedAST' Bool): TypedAST' Bool.\n\nRecord TypedAST :=\n  { tau: Tau; ast: TypedAST' tau }.\n\nFixpoint typecheck (ast: UntypedAST) : option TypedAST :=\n  match ast with\n  | UNat n => Some {| ast := TNat n |}\n  | UBool b => Some {| ast := TBool b |}\n  | UAdd e1 e2 =>\n    match typecheck e1, typecheck e2 with\n    | Some {| tau := Nat; ast := t1 |},\n      Some {| tau := Nat; ast := t2 |} =>\n      Some {| ast := TAdd t1 t2 |}\n    | _, _ => None\n    end\n  | UAnd e1 e2 =>\n    match typecheck e1, typecheck e2 with\n    | Some {| tau := Bool; ast := t1 |},\n      Some {| tau := Bool; ast := t2 |} =>\n      Some {| ast := TAnd t1 t2 |}\n    | _, _ => None\n    end\n  end.\n\nFixpoint interp' {tau} (ast: TypedAST' tau) : Value' tau :=\n  match ast with\n  | TNat n => n\n  | TBool b => b\n  | TAdd e1 e2 => interp' e1 + interp' e2\n  | TAnd e1 e2 => interp' e1 && interp' e2\n  end.\n\nRecord Value :=\n  { vtau: Tau; val: Value' vtau }.\n\nDefinition interp (t: TypedAST) : Value :=\n  {| val := interp' t.(ast) |}.\n\n(* Arguments Value {tau} : assert. *)",
    "Check typecheck.\nCheck interp.",
    "Example well_typed := UAdd (UNat 1) (UNat 1).\nExample ill_typed := UAdd (UNat 1) (UBool true).",
    "Definition tc_good := typecheck well_typed.\nCompute tc_good. (* Accepted: So far so good. *)\n\nDefinition tc_bad := typecheck ill_typed.\nCompute tc_bad. (* Rejected: all good as well. *)",
    "Fail Compute interp tc_good. (* .fails *)",
    "Definition unwrap_default (o: option TypedAST) : TypedAST :=\n  match o with\n  | Some t => t\n  | None => {| ast := TNat 1 |}\n  end.\n\nCompute interp (unwrap_default tc_good). (* .unfold *)",
    "Compute interp (unwrap_default tc_bad). (* .unfold *)",
    " Definition unwrap {A} (o: option A)\n            (not_none: o <> None) : A :=\n   match o return _ = o -> A with\n   | Some a => fun _ => a\n   | None => fun is_none => False_rect _ (not_none is_none)\n   end eq_refl.",
    "Compute interp (unwrap tc_good\n  (fun some_eq_none =>\n    @eq_rect_r (option TypedAST) None\n               (fun o: option TypedAST =>\n                  if o then False else True)\n               I tc_good some_eq_none)).",
    "Compute interp (unwrap tc_good ltac:(discriminate)).\nFail Compute interp (unwrap tc_bad ltac:(discriminate)). (* .fails *)",
    "Check (unwrap tc_good ltac:(discriminate)).",
    "Definition nth_in_bounds {A} (l: list A) (n: nat)\n           (in_bounds: n < List.length l) :=\n  unwrap (List.nth_error l n)\n         (proj2 (List.nth_error_Some l n) in_bounds).\n\nCompute nth_in_bounds [1; 2; 3] 2\n           ltac:(repeat constructor). (* .unfold *)",
    "Compute interp (unwrap tc_good _).",
    "Compute (unwrap None _).",
    "Fail Definition good := (* .fails *)\n  Eval compute in interp (unwrap tc_good _).",
    " Definition is_some {A} (o: option A) : bool :=\n   if o then true else false.\n\n Lemma is_some_not_none {A} {o: option A} :\n   is_some o = true -> o <> None.\n Proof. destruct o. all: cbn. all: congruence. Qed.",
    " Definition unwrap_dec {A} (o: option A)\n            (is_some_true: is_some o = true) : A :=\n   unwrap o (is_some_not_none is_some_true).\n\n Compute interp (unwrap_dec tc_good eq_refl). (* .unfold *)",
    "Notation unwrap_dec' o := (unwrap_dec o eq_refl).",
    "Definition nth_in_bounds_dec {A} (l: list A) (n: nat)\n           (lt_true: (n <? List.length l) = true) :=\n  nth_in_bounds l n (proj1 (Nat.ltb_lt _ _) lt_true).\n\n  Compute nth_in_bounds_dec [1; 2; 3] 2 eq_refl. (* .unfold *)",
    "Compute interp (unwrap_dec tc_good _).\nFail Compute interp (unwrap_dec None eq_refl). (* .fails *)\nCompute interp (unwrap_dec None _).",
    "Inductive error : string -> Type := Err (s: string) : error s.\n\nDefinition unwrap_dep {A} (o: option A)\n  : if o then A else error _ :=\n  match o with\n  | Some a => a\n  | None => Err \"Expecting Some, got None\"\n  end.\n\nCompute interp (unwrap_dep tc_good). (* .unfold *)",
    "Fail Compute interp (unwrap_dep tc_bad). (* .fails *)",
    "Definition nth_in_bounds_dep {A} (l: list A) (n: nat)\n  : if lt_dec n (List.length l) then A else error _ :=\n  match lt_dec n (List.length l) as cmp\n    return (if cmp then A else error _) with\n  | left in_bounds => nth_in_bounds l n in_bounds\n  | right _ => Err \"Index is out of bounds\"\n  end.",
    "Compute nth_in_bounds_dep [1; 2; 3] 2.\nCompute nth_in_bounds_dep [1; 2; 3] 7.",
    "Notation compute_all term :=\n  ltac:(let term := (eval compute in term) in\n        exact_no_check term) (only parsing).\n\nCheck (compute_all (nth_in_bounds_dep [1; 2; 3] 2)). (* .unfold *)",
    "Notation compute_in_type term :=\n  ltac:(let type := type of term in\n        let type := (eval compute in type) in\n        exact_no_check (term: type)) (only parsing).\n\nCheck (compute_in_type (nth_in_bounds_dep [1; 2; 3] 2)). (* .unfold *)",
    "Notation unwrap_refl o :=\n  ((fun v (pf : o = Some v) => v) _ eq_refl) (only parsing).\n\nCompute unwrap_refl tc_good. (* .unfold *)",
    "Notation unwrap_tac opt :=\n  ltac:(match (eval hnf in opt) with\n        | Some ?v => exact v\n        | ?other => fail \"Error:\" other \"isn't [Some _]\"\n        end) (only parsing).",
    "Fail Compute (unwrap_tac (Som 1)).",
    "Notation unwrap_tac' opt :=\n  (match opt with _ =>\n   ltac:(match (eval hnf in opt) with\n         | Some ?v => exact v\n         | ?other => fail \"Error:\" other \"isn't [Some _]\"\n         end) end) (only parsing).\n\nFail Compute (unwrap_tac' (Som 1)). (* .fails .unfold *)"
  ],
  "annotated": [
    [
      {
        "_type": "sentence",
        "contents": "Require Coq.Strings.String Coq.Lists.List Coq.Arith.Arith.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Import String Arith List.ListNotations.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Open Scope list_scope.",
        "messages": [],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Require Import Coq.Bool.Bool.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Inductive UntypedAST : Type :=\n| UNat (n: nat)\n| UBool (b: bool)\n| UAdd (e1 e2: UntypedAST)\n| UAnd (e1 e2: UntypedAST).",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Inductive Tau :=\n| Nat\n| Bool.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Fixpoint Value' (tau: Tau) :=\n  match tau with\n  | Nat => nat\n  | Bool => bool\n  end.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Inductive TypedAST' : Tau -> Type :=\n| TNat (n: nat) : TypedAST' Nat\n| TBool (b: bool) : TypedAST' Bool\n| TAdd (e1 e2: TypedAST' Nat): TypedAST' Nat\n| TAnd (e1 e2: TypedAST' Bool): TypedAST' Bool.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Record TypedAST :=\n  { tau: Tau; ast: TypedAST' tau }.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Fixpoint typecheck (ast: UntypedAST) : option TypedAST :=\n  match ast with\n  | UNat n => Some {| ast := TNat n |}\n  | UBool b => Some {| ast := TBool b |}\n  | UAdd e1 e2 =>\n    match typecheck e1, typecheck e2 with\n    | Some {| tau := Nat; ast := t1 |},\n      Some {| tau := Nat; ast := t2 |} =>\n      Some {| ast := TAdd t1 t2 |}\n    | _, _ => None\n    end\n  | UAnd e1 e2 =>\n    match typecheck e1, typecheck e2 with\n    | Some {| tau := Bool; ast := t1 |},\n      Some {| tau := Bool; ast := t2 |} =>\n      Some {| ast := TAnd t1 t2 |}\n    | _, _ => None\n    end\n  end.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Fixpoint interp' {tau} (ast: TypedAST' tau) : Value' tau :=\n  match ast with\n  | TNat n => n\n  | TBool b => b\n  | TAdd e1 e2 => interp' e1 + interp' e2\n  | TAnd e1 e2 => interp' e1 && interp' e2\n  end.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Record Value :=\n  { vtau: Tau; val: Value' vtau }.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Definition interp (t: TypedAST) : Value :=\n  {| val := interp' t.(ast) |}.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n(* Arguments Value {tau} : assert. *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Check typecheck.",
        "messages": [
          {
            "_type": "message",
            "contents": "typecheck\n     : UntypedAST -> option TypedAST"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Check interp.",
        "messages": [
          {
            "_type": "message",
            "contents": "interp\n     : TypedAST -> Value"
          }
        ],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Example well_typed := UAdd (UNat 1) (UNat 1).",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Example ill_typed := UAdd (UNat 1) (UBool true).",
        "messages": [],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Definition tc_good := typecheck well_typed.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Compute tc_good.",
        "messages": [
          {
            "_type": "message",
            "contents": "     = Some\n         {|\n         tau := Nat;\n         ast := TAdd (TNat 1) (TNat 1) |}\n     : option TypedAST"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* Accepted: So far so good. *)\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Definition tc_bad := typecheck ill_typed.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Compute tc_bad.",
        "messages": [
          {
            "_type": "message",
            "contents": "     = None\n     : option TypedAST"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* Rejected: all good as well. *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Fail Compute interp tc_good.",
        "messages": [
          {
            "_type": "message",
            "contents": "The command has indeed failed with message:\nThe term \"tc_good\" has type \"option TypedAST\"\nwhile it is expected to have type \"TypedAST\"."
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .fails *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Definition unwrap_default (o: option TypedAST) : TypedAST :=\n  match o with\n  | Some t => t\n  | None => {| ast := TNat 1 |}\n  end.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Compute interp (unwrap_default tc_good).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = {| vtau := Nat; val := 2 |}\n     : Value"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Compute interp (unwrap_default tc_bad).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = {| vtau := Nat; val := 1 |}\n     : Value"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)"
      }
    ],
    [
      {
        "_type": "text",
        "contents": " "
      },
      {
        "_type": "sentence",
        "contents": "Definition unwrap {A} (o: option A)\n            (not_none: o <> None) : A :=\n   match o return _ = o -> A with\n   | Some a => fun _ => a\n   | None => fun is_none => False_rect _ (not_none is_none)\n   end eq_refl.",
        "messages": [],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Compute interp (unwrap tc_good\n  (fun some_eq_none =>\n    @eq_rect_r (option TypedAST) None\n               (fun o: option TypedAST =>\n                  if o then False else True)\n               I tc_good some_eq_none)).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = {| vtau := Nat; val := 2 |}\n     : Value"
          }
        ],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Compute interp (unwrap tc_good ltac:(discriminate)).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = {| vtau := Nat; val := 2 |}\n     : Value"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Fail Compute interp (unwrap tc_bad ltac:(discriminate)).",
        "messages": [
          {
            "_type": "message",
            "contents": "The command has indeed failed with message:\nNot a discriminable equality."
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .fails *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Check (unwrap tc_good ltac:(discriminate)).",
        "messages": [
          {
            "_type": "message",
            "contents": "unwrap tc_good\n  (fun H : tc_good = None =>\n   let H0 : False :=\n     eq_ind tc_good\n       (fun e : option TypedAST =>\n        match e with\n        | Some _ => True\n        | None => False\n        end) I None H in\n   False_ind False H0)\n     : TypedAST"
          }
        ],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Definition nth_in_bounds {A} (l: list A) (n: nat)\n           (in_bounds: n < List.length l) :=\n  unwrap (List.nth_error l n)\n         (proj2 (List.nth_error_Some l n) in_bounds).",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Compute nth_in_bounds [1; 2; 3] 2\n           ltac:(repeat constructor).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = 3\n     : nat"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Compute interp (unwrap tc_good _).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = {| vtau := Nat; val := 2 |}\n     : Value"
          }
        ],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Compute (unwrap None _).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = match ?not_none eq_refl return ?A with\n       end\n     : ?A"
          }
        ],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Fail Definition good := (* .fails *)\n  Eval compute in interp (unwrap tc_good _).",
        "messages": [
          {
            "_type": "message",
            "contents": "The command has indeed failed with message:\nCannot infer this placeholder of type\n\"tc_good <> None\"."
          }
        ],
        "goals": []
      }
    ],
    [
      {
        "_type": "text",
        "contents": " "
      },
      {
        "_type": "sentence",
        "contents": "Definition is_some {A} (o: option A) : bool :=\n   if o then true else false.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n "
      },
      {
        "_type": "sentence",
        "contents": "Lemma is_some_not_none {A} {o: option A} :\n   is_some o = true -> o <> None.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "is_some o = true -> o <> None",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "A"
                ],
                "body": null,
                "type": "Type"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "o"
                ],
                "body": null,
                "type": "option A"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": "\n "
      },
      {
        "_type": "sentence",
        "contents": "Proof.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "is_some o = true -> o <> None",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "A"
                ],
                "body": null,
                "type": "Type"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "o"
                ],
                "body": null,
                "type": "option A"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " "
      },
      {
        "_type": "sentence",
        "contents": "destruct o.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "is_some (Some a) = true -> Some a <> None",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "A"
                ],
                "body": null,
                "type": "Type"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "a"
                ],
                "body": null,
                "type": "A"
              }
            ]
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "is_some None = true -> None <> None",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "A"
                ],
                "body": null,
                "type": "Type"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " "
      },
      {
        "_type": "sentence",
        "contents": "all: cbn.",
        "messages": [],
        "goals": [
          {
            "_type": "goal",
            "name": null,
            "conclusion": "true = true -> Some a <> None",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "A"
                ],
                "body": null,
                "type": "Type"
              },
              {
                "_type": "hypothesis",
                "names": [
                  "a"
                ],
                "body": null,
                "type": "A"
              }
            ]
          },
          {
            "_type": "goal",
            "name": null,
            "conclusion": "false = true -> None <> None",
            "hypotheses": [
              {
                "_type": "hypothesis",
                "names": [
                  "A"
                ],
                "body": null,
                "type": "Type"
              }
            ]
          }
        ]
      },
      {
        "_type": "text",
        "contents": " "
      },
      {
        "_type": "sentence",
        "contents": "all: congruence.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " "
      },
      {
        "_type": "sentence",
        "contents": "Qed.",
        "messages": [],
        "goals": []
      }
    ],
    [
      {
        "_type": "text",
        "contents": " "
      },
      {
        "_type": "sentence",
        "contents": "Definition unwrap_dec {A} (o: option A)\n            (is_some_true: is_some o = true) : A :=\n   unwrap o (is_some_not_none is_some_true).",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n "
      },
      {
        "_type": "sentence",
        "contents": "Compute interp (unwrap_dec tc_good eq_refl).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = {| vtau := Nat; val := 2 |}\n     : Value"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Notation unwrap_dec' o := (unwrap_dec o eq_refl).",
        "messages": [],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Definition nth_in_bounds_dec {A} (l: list A) (n: nat)\n           (lt_true: (n <? List.length l) = true) :=\n  nth_in_bounds l n (proj1 (Nat.ltb_lt _ _) lt_true).",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n  "
      },
      {
        "_type": "sentence",
        "contents": "Compute nth_in_bounds_dec [1; 2; 3] 2 eq_refl.",
        "messages": [
          {
            "_type": "message",
            "contents": "     = 3\n     : nat"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Compute interp (unwrap_dec tc_good _).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = {| vtau := Nat; val := 2 |}\n     : Value"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Fail Compute interp (unwrap_dec None eq_refl).",
        "messages": [
          {
            "_type": "message",
            "contents": "The command has indeed failed with message:\nThe term \"eq_refl\" has type\n \"is_some None = is_some None\"\nwhile it is expected to have type\n \"is_some None = true\"."
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .fails *)\n"
      },
      {
        "_type": "sentence",
        "contents": "Compute interp (unwrap_dec None _).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = {|\n       vtau := let (tau, _) :=\n                 match\n                   is_some_not_none ?is_some_true\n                     eq_refl return TypedAST\n                 with\n                 end in\n               tau;\n       val := (fix\n               Ffix (x : Tau) (x0 : TypedAST' x)\n                    {struct x0} :\n                 (fix Ffix0 (x1 : Tau) : Set :=\n                    match x1 with\n                    | Nat => nat\n                    | Bool => bool\n                    end) x :=\n                 match\n                   x0 in (TypedAST' H)\n                   return\n                     ((fix Ffix0 (x1 : Tau) : Set :=\n                         match x1 with\n                         | Nat => nat\n                         | Bool => bool\n                         end) H)\n                 with\n                 | TNat n => n\n                 | TBool b => b\n                 | TAdd e1 e2 =>\n                     (fix\n                      Ffix0 (x1 x2 : nat) {struct x1} :\n                        nat :=\n                        match x1 with\n                        | 0 => x2\n                        | S x3 => S (Ffix0 x3 x2)\n                        end) (Ffix Nat e1)\n                       (Ffix Nat e2)\n                 | TAnd e1 e2 =>\n                     if Ffix Bool e1\n                     then Ffix Bool e2\n                     else false\n                 end)\n                (let (tau, _) :=\n                   match\n                     is_some_not_none ?is_some_true\n                       eq_refl return TypedAST\n                   with\n                   end in\n                 tau)\n                (let\n                   (tau, ast) as c\n                    return\n                      (TypedAST'\n                         (let (tau, _) := c in tau)) :=\n                   match\n                     is_some_not_none ?is_some_true\n                       eq_refl return TypedAST\n                   with\n                   end in\n                 ast) |}\n     : Value"
          }
        ],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Inductive error : string -> Type := Err (s: string) : error s.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Definition unwrap_dep {A} (o: option A)\n  : if o then A else error _ :=\n  match o with\n  | Some a => a\n  | None => Err \"Expecting Some, got None\"\n  end.",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Compute interp (unwrap_dep tc_good).",
        "messages": [
          {
            "_type": "message",
            "contents": "     = {| vtau := Nat; val := 2 |}\n     : Value"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Fail Compute interp (unwrap_dep tc_bad).",
        "messages": [
          {
            "_type": "message",
            "contents": "The command has indeed failed with message:\nThe term \"unwrap_dep tc_bad\" has type\n \"if tc_bad\n  then TypedAST\n  else error \"Expecting Some, got None\"\"\nwhile it is expected to have type \"TypedAST\"."
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .fails *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Definition nth_in_bounds_dep {A} (l: list A) (n: nat)\n  : if lt_dec n (List.length l) then A else error _ :=\n  match lt_dec n (List.length l) as cmp\n    return (if cmp then A else error _) with\n  | left in_bounds => nth_in_bounds l n in_bounds\n  | right _ => Err \"Index is out of bounds\"\n  end.",
        "messages": [],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Compute nth_in_bounds_dep [1; 2; 3] 2.",
        "messages": [
          {
            "_type": "message",
            "contents": "     = 3\n     : if lt_dec 2 (Datatypes.length [1; 2; 3])\n       then nat\n       else error \"Index is out of bounds\""
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n"
      },
      {
        "_type": "sentence",
        "contents": "Compute nth_in_bounds_dep [1; 2; 3] 7.",
        "messages": [
          {
            "_type": "message",
            "contents": "     = Err \"Index is out of bounds\"\n     : if lt_dec 7 (Datatypes.length [1; 2; 3])\n       then nat\n       else error \"Index is out of bounds\""
          }
        ],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Notation compute_all term :=\n  ltac:(let term := (eval compute in term) in\n        exact_no_check term) (only parsing).",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Check (compute_all (nth_in_bounds_dep [1; 2; 3] 2)).",
        "messages": [
          {
            "_type": "message",
            "contents": "3\n     : nat"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Notation compute_in_type term :=\n  ltac:(let type := type of term in\n        let type := (eval compute in type) in\n        exact_no_check (term: type)) (only parsing).",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Check (compute_in_type (nth_in_bounds_dep [1; 2; 3] 2)).",
        "messages": [
          {
            "_type": "message",
            "contents": "nth_in_bounds_dep [1; 2; 3] 2 : nat\n     : nat"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Notation unwrap_refl o :=\n  ((fun v (pf : o = Some v) => v) _ eq_refl) (only parsing).",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Compute unwrap_refl tc_good.",
        "messages": [
          {
            "_type": "message",
            "contents": "     = {| tau := Nat; ast := TAdd (TNat 1) (TNat 1) |}\n     : TypedAST"
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .unfold *)"
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Notation unwrap_tac opt :=\n  ltac:(match (eval hnf in opt) with\n        | Some ?v => exact v\n        | ?other => fail \"Error:\" other \"isn't [Some _]\"\n        end) (only parsing).",
        "messages": [],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Fail Compute (unwrap_tac (Som 1)).",
        "messages": [
          {
            "_type": "message",
            "contents": "The command has indeed failed with message:\nThe reference opt was not found in the current\nenvironment."
          }
        ],
        "goals": []
      }
    ],
    [
      {
        "_type": "sentence",
        "contents": "Notation unwrap_tac' opt :=\n  (match opt with _ =>\n   ltac:(match (eval hnf in opt) with\n         | Some ?v => exact v\n         | ?other => fail \"Error:\" other \"isn't [Some _]\"\n         end) end) (only parsing).",
        "messages": [],
        "goals": []
      },
      {
        "_type": "text",
        "contents": "\n\n"
      },
      {
        "_type": "sentence",
        "contents": "Fail Compute (unwrap_tac' (Som 1)).",
        "messages": [
          {
            "_type": "message",
            "contents": "The command has indeed failed with message:\nThe reference Som was not found in the current\nenvironment."
          }
        ],
        "goals": []
      },
      {
        "_type": "text",
        "contents": " (* .fails .unfold *)"
      }
    ]
  ]
}